generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model User {
  id                      Int              @id @default(autoincrement())
  username                String           @unique @db.VarChar(50)
  email                   String           @unique @db.VarChar(255)
  password                String           @db.VarChar(255)
  role                    Role
  full_name               String?          @db.VarChar(100)
  created_at              DateTime         @default(now())
  applications            OcrApplication[] @relation("AgentApplications")
  Policy                  Policy[]
  registeredPolicyholders PolicyHolder[]   @relation("AgentToPolicyHolder")
}

model PolicyHolder {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  full_name     String         @db.VarChar(100)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  agent_id      Int?
  beneficiaries Beneficiary[]
  claimFiles    ClaimFile[]
  notifications Notification[]
  policies      Policy[]
  agent         User?          @relation("AgentToPolicyHolder", fields: [agent_id], references: [id])
  uploads       UserUploads[]
}

model UserUploads {
  id                 Int          @id @default(autoincrement())
  file_name          String       @db.VarChar(255)
  file_path          String       @db.VarChar(500)
  uploaded_at        DateTime     @default(now())
  policy_holder_id   Int
  status             String       @default("Pending")
  policy_number      String?
  ocr_application_id Int?         @unique
  policyHolder       PolicyHolder @relation(fields: [policy_holder_id], references: [id])
}

model Query {
  id          Int      @id @default(autoincrement())
  message     String
  senderEmail String   @db.VarChar(255)
  created_at  DateTime @default(now())
  resolved    Boolean  @default(false)
}

model ClaimFile {
  id               Int          @id @default(autoincrement())
  file_name        String       @db.VarChar(255)
  file_path        String       @db.VarChar(500)
  uploaded_at      DateTime     @default(now())
  policy_holder_id Int
  status           String       @default("Pending")
  policy_number    String?
  ocr_claim_id     Int?         @unique
  policyHolder     PolicyHolder @relation(fields: [policy_holder_id], references: [id])
}

model Notification {
  id             Int          @id @default(autoincrement())
  policyHolderId Int
  message        String
  email          String
  date           DateTime     @default(now())
  read           Boolean      @default(false)
  policyHolder   PolicyHolder @relation(fields: [policyHolderId], references: [id])
}

model OcrClaim {
  id               Int      @id @default(autoincrement())
  claimNo          String   @unique @db.VarChar(50)
  policyNo         String   @db.VarChar(50)
  deceasedName     String   @db.VarChar(100)
  deceasedLastName String   @db.VarChar(100)
  cause            String   @db.VarChar(255)
  DOD              DateTime
  created_at       DateTime @default(now())
  filePath         String
}

model OcrApplication {
  id               Int      @id @default(autoincrement())
  applicationNo    String   @unique @db.VarChar(50)
  fullName         String   @db.VarChar(100)
  dateOfBirth      DateTime
  address          String   @db.VarChar(255)
  phone            String   @db.VarChar(20)
  medicalCondition String   @db.VarChar(255)
  preferredPremium String   @db.VarChar(50)
  created_at       DateTime @default(now())
  filePath         String
  agent_id         Int?
  agent            User?    @relation("AgentApplications", fields: [agent_id], references: [id])
}

model Beneficiary {
  id             Int          @id @default(autoincrement())
  policyHolderId Int
  policy_number  String       @db.VarChar(50)
  fullName       String       @db.VarChar(100)
  relationship   String       @db.VarChar(50)
  dateOfBirth    DateTime
  status         String       @default("Pending")
  createdAt      DateTime     @default(now())
  policyHolder   PolicyHolder @relation(fields: [policyHolderId], references: [id], onDelete: Cascade)
}

model Policy {
  id               Int          @id @default(autoincrement())
  policy_number    String       @unique
  policy_holder_id Int
  agent_id         Int?
  fullName         String       @db.VarChar(100)
  email            String       @db.VarChar(255)
  dateOfBirth      DateTime
  phone            String       @db.VarChar(20)
  created_at       DateTime     @default(now())
  agent            User?        @relation(fields: [agent_id], references: [id])
  policyHolder     PolicyHolder @relation(fields: [policy_holder_id], references: [id])
}

model Backup {
  id        Int      @id @default(autoincrement())
  name      String
  filePath  String
  createdAt DateTime @default(now())
}

enum Role {
  IT_ADMIN
  SYSTEM_ADMIN
  STAKEHOLDER
  AGENT
  POLICYHOLDER
}
